@model List<BuildingBlock.DTOS.GalleryDTO>
@{
    ViewData["Title"] = "Gallery";
    Layout = "~/Views/Shared/_Layout.cshtml";
    var apiUrl = ViewBag.ApiUrl;
    var cdnUrl = ViewBag.CdnUrl;
    var isLoggedIn = !string.IsNullOrEmpty(TempData["currentUser"]?.ToString());
}

<link rel="stylesheet" href="~/css/gallery-index.css" />

<!-- Hero Section -->
<div class="gallery-hero">
    <div class="hero-content">

        <!-- Search Bar -->
        <div class="search-container">
            <div class="search-box">
                <input type="text" id="searchInput" placeholder="Search galleries..." class="search-input">
                <button id="clearSearchBtn" class="clear-search-btn" style="display: none;">‚úï</button>
                <button id="searchBtn" class="search-btn">üîç</button>
            </div>
        </div>

        @if (isLoggedIn)
        {
            <a href="/Gallery/Manager/0" class="hero-btn">
                <span>+</span> CREATE NEW GALLERY
            </a>
        }
    </div>
</div>

<!-- Gallery Grid -->
<div class="gallery-container">
    <div class="gallery-grid" id="galleryGrid">
        <!-- Initial galleries will be loaded here -->
    </div>
</div>

<!-- Loading Indicator -->
<div id="loadingIndicator" class="loading-indicator" style="display: none;">
    <div class="loading-spinner"></div>
    <span>Loading more galleries...</span>
</div>

<!-- End of Results -->
<div id="endOfResults" class="end-of-results" style="display: none;">
    <span>You've reached the end of the gallery collection</span>
</div>

<script>
    // Infinite Scroll and Search functionality
    let currentPage = 1;
    let isLoading = false;
    let hasMorePages = true;
    let currentSearch = '';
    const pageSize = 10;
    const apiUrl = '@apiUrl';
    const cdnUrl = '@cdnUrl';

    // DOM Elements
    const galleryGrid = document.querySelector('.gallery-grid');
    const searchInput = document.getElementById('searchInput');
    const searchBtn = document.getElementById('searchBtn');
    const clearSearchBtn = document.getElementById('clearSearchBtn');
    const loadingIndicator = document.getElementById('loadingIndicator');
    const endOfResults = document.getElementById('endOfResults');

    // Search functionality
    function performSearch(searchTerm) {
        console.log('Performing search for:', searchTerm);

        // Trim and normalize search term
        currentSearch = searchTerm.trim();
        currentPage = 1;
        hasMorePages = true;

        // Clear existing galleries
        if (galleryGrid) {
            galleryGrid.innerHTML = '';
        }

        // Hide end of results
        if (endOfResults) {
            endOfResults.style.display = 'none';
        }

        // Update UI
        updateSearchUI();

        // Load first page with search
        loadGalleries(true);
    }

    // Clear search functionality
    function clearSearch() {
        console.log('Clearing search');

        // Clear search input
        if (searchInput) {
            searchInput.value = '';
        }

        // Reset search state
        currentSearch = '';
        currentPage = 1;
        hasMorePages = true;

        // Clear existing galleries
        if (galleryGrid) {
            galleryGrid.innerHTML = '';
        }

        // Hide end of results
        if (endOfResults) {
            endOfResults.style.display = 'none';
        }

        // Update UI
        updateSearchUI();

        // Load first page without search
        loadGalleries();
    }

    // Update search UI
    function updateSearchUI() {
        if (clearSearchBtn) {
            if (currentSearch) {
                clearSearchBtn.style.display = 'flex';
            } else {
                clearSearchBtn.style.display = 'none';
            }
        }
    }

    // Load galleries function
    async function loadGalleries(isSearch = false) {
        if (isLoading || !hasMorePages) return;

        isLoading = true;

        // Only show loading indicator if we're not on the first page
        if (currentPage > 1 && loadingIndicator) {
            loadingIndicator.style.display = 'flex';
        }

        try {
            const searchParam = currentSearch ? `&search=${encodeURIComponent(currentSearch)}` : '';
            const url = `${apiUrl}/api/Gallery?page=${currentPage}&pageSize=${pageSize}${searchParam}`;

            console.log('Fetching URL:', url);

            const response = await fetch(url);
            const result = await response.json();

            console.log('API Response:', result);

            // API returns PagedResult directly, not wrapped in success field
            if (result && result.data) {
                const galleries = result.data;

                if (galleries.length === 0 && currentPage === 1) {
                    // No results found
                    showEmptyState();
                } else if (galleries.length > 0) {
                    // Add galleries to grid
                    galleries.forEach(gallery => {
                        addGalleryToGrid(gallery);
                    });

                    // Check if there are more pages
                    hasMorePages = result.hasNextPage;
                    currentPage++;

                    if (!hasMorePages) {
                        showEndOfResults();
                    }
                }
            }
        } catch (error) {
            console.error('Error loading galleries:', error);
        } finally {
            isLoading = false;
            if (loadingIndicator) {
                loadingIndicator.style.display = 'none';
            }
        }
    }

    // Add gallery to grid
    function addGalleryToGrid(gallery) {
        if (!galleryGrid) return;

        const galleryItem = document.createElement('div');
        galleryItem.className = 'gallery-item';
        galleryItem.setAttribute('data-gallery-id', gallery.idGallery);

        const isLoggedIn = @isLoggedIn.ToString().ToLower();

        galleryItem.innerHTML = `
            <div class="gallery-banner">
                ${gallery.bannerImagePath ?
                `<img src="${cdnUrl}/assets/gallery/${gallery.idGallery}/${gallery.bannerImagePath}" alt="${gallery.title}" class="banner-img">` :
                `<div class="banner-placeholder"><span class="placeholder-icon">üì∏</span></div>`
            }
                
                <div class="gallery-overlay">
                    <div class="gallery-info">
                        <h3 class="gallery-title">${gallery.title.toUpperCase()}</h3>
                        <div class="gallery-meta">
                            <span class="photo-count">üì∏ ${gallery.galleryItems.length} Photos</span>
                            <span class="gallery-date">${new Date(gallery.createdDate).toLocaleDateString('vi-VN')}</span>
                        </div>
                        <div class="gallery-actions">
                            <a href="${isLoggedIn ? `/Gallery/Manager/${gallery.idGallery}` : `/Gallery/${gallery.url?.replace('/', '') || 'Manager/' + gallery.idGallery}`}" class="action-btn">
                                ${isLoggedIn ? 'MANAGE' : 'VIEW GALLERY'}
                            </a>
                            ${isLoggedIn ?
                `<button class="delete-btn" onclick="deleteGallery(${gallery.idGallery}, '${gallery.title}')" title="X√≥a Gallery">
                                    üóëÔ∏è
                                </button>` : ''
            }
                        </div>
                    </div>
                </div>
            </div>
            
            <div class="preview-grid">
                ${gallery.galleryItems.length > 0 ?
                gallery.galleryItems.slice(0, 5).map(item =>
                    `<div class="preview-item">
                            <img src="${cdnUrl}/assets/gallery/${gallery.idGallery}/${item.imagePath}" alt="${item.imageName}" class="preview-img">
                        </div>`
                ).join('') +
                (gallery.galleryItems.length > 5 ?
                    `<div class="preview-item more-count"><span class="more-text">+${gallery.galleryItems.length - 5}</span></div>` : '')
                :
                `<div class="empty-preview">
                        <span class="empty-icon">üì∑</span>
                        <span class="empty-text">No photos yet</span>
                    </div>`
            }
            </div>
        `;

        galleryGrid.appendChild(galleryItem);
    }

    // Show empty state
    function showEmptyState() {
        if (galleryGrid) {
            galleryGrid.innerHTML = `
                <div class="empty-state">
                    <div class="empty-content">
                        <div class="empty-icon">üì∏</div>
                        <h2 class="empty-title">No Galleries Found</h2>
                        <p class="empty-subtitle">Try adjusting your search terms</p>
                    </div>
                </div>
            `;
        }
    }

    // Show end of results
    function showEndOfResults() {
        if (endOfResults) {
            endOfResults.style.display = 'block';
        }
    }

    // Delete gallery function
    async function deleteGallery(galleryId, galleryTitle) {
        // Check if SweetAlert is loaded
        if (typeof Swal === 'undefined') {
            // Fallback to native confirm
            if (!confirm(`B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a gallery "${galleryTitle}"?\n\nH√†nh ƒë·ªông n√†y s·∫Ω x√≥a:\n- T·∫•t c·∫£ ·∫£nh trong gallery\n- Banner image\n- To√†n b·ªô th∆∞ m·ª•c gallery\n\nH√†nh ƒë·ªông n√†y KH√îNG TH·ªÇ HO√ÄN T√ÅC!`)) {
                return;
            }
        } else {
            // Show SweetAlert confirmation dialog
            const result = await Swal.fire({
                title: 'X√°c nh·∫≠n x√≥a Gallery',
                html: `
                    <div style="text-align: left; margin: 20px 0;">
                        <p><strong>B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a gallery "${galleryTitle}"?</strong></p>
                        <br>
                        <p>H√†nh ƒë·ªông n√†y s·∫Ω x√≥a:</p>
                        <ul style="margin-left: 20px;">
                            <li>T·∫•t c·∫£ ·∫£nh trong gallery</li>
                            <li>Banner image</li>
                            <li>To√†n b·ªô th∆∞ m·ª•c gallery</li>
                        </ul>
                        <br>
                        <p style="color: #dc3545; font-weight: bold;">‚ö†Ô∏è H√†nh ƒë·ªông n√†y KH√îNG TH·ªÇ HO√ÄN T√ÅC!</p>
                    </div>
                `,
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#dc3545',
                cancelButtonColor: '#6c757d',
                confirmButtonText: 'X√≥a Gallery',
                cancelButtonText: 'H·ªßy',
                reverseButtons: true,
                focusCancel: true
            });

            if (!result.isConfirmed) {
                return;
            }
        }

        try {
            // Show loading
            if (typeof Swal !== 'undefined') {
                Swal.fire({
                    title: 'ƒêang x√≥a...',
                    text: 'Vui l√≤ng ch·ªù trong gi√¢y l√°t',
                    allowOutsideClick: false,
                    showConfirmButton: false,
                    didOpen: () => {
                        Swal.showLoading();
                    }
                });
            }

            const response = await fetch(`${apiUrl}/api/Gallery/${galleryId}`, {
                method: 'DELETE',
                headers: {
                    'Content-Type': 'application/json'
                }
            });

            if (response.ok) {
                // Remove gallery from UI
                const galleryElement = document.querySelector(`[data-gallery-id="${galleryId}"]`);
                if (galleryElement) {
                    galleryElement.remove();
                }

                // Show success message
                if (typeof Swal !== 'undefined') {
                    await Swal.fire({
                        title: 'Th√†nh c√¥ng!',
                        text: `Gallery "${galleryTitle}" ƒë√£ ƒë∆∞·ª£c x√≥a th√†snh c√¥ng!`,
                        icon: 'success',
                        confirmButtonText: 'OK'
                    });
                } else {
                    alert(`Gallery "${galleryTitle}" ƒë√£ ƒë∆∞·ª£c x√≥a th√†nh c√¥ng!`);
                }

                // Refresh the page to update the list
                location.reload();
            } else {
                const errorText = await response.text();
                if (typeof Swal !== 'undefined') {
                    await Swal.fire({
                        title: 'L·ªói!',
                        text: `L·ªói khi x√≥a gallery: ${errorText}`,
                        icon: 'error',
                        confirmButtonText: 'OK'
                    });
                } else {
                    alert(`L·ªói khi x√≥a gallery: ${errorText}`);
                }
            }
        } catch (error) {
            console.error('Error deleting gallery:', error);
            if (typeof Swal !== 'undefined') {
                await Swal.fire({
                    title: 'L·ªói!',
                    text: 'C√≥ l·ªói x·∫£y ra khi x√≥a gallery. Vui l√≤ng th·ª≠ l·∫°i.',
                    icon: 'error',
                    confirmButtonText: 'OK'
                });
            } else {
                alert('C√≥ l·ªói x·∫£y ra khi x√≥a gallery. Vui l√≤ng th·ª≠ l·∫°i.');
            }
        }
    }

    // Event Listeners
    if (searchBtn) {
        searchBtn.addEventListener('click', () => {
            const searchTerm = searchInput ? searchInput.value.trim() : '';
            if (searchTerm) {
                performSearch(searchTerm);
            }
        });
    }

    if (clearSearchBtn) {
        clearSearchBtn.addEventListener('click', () => {
            clearSearch();
        });
    }

    if (searchInput) {
        searchInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                const searchTerm = searchInput.value.trim();
                if (searchTerm) {
                    performSearch(searchTerm);
                }
            }
        });

        // Show/hide clear button based on input
        searchInput.addEventListener('input', () => {
            updateSearchUI();
        });
    }

    // Infinite scroll
    window.addEventListener('scroll', () => {
        if (hasMorePages && window.innerHeight + window.scrollY >= document.body.offsetHeight - 1000) {
            loadGalleries();
        }
    });

    // Initial load
    document.addEventListener('DOMContentLoaded', () => {
        // Always start fresh with client-side loading
        currentPage = 1;
        hasMorePages = true;
        currentSearch = '';

        // Clear any existing content
        if (galleryGrid) {
            galleryGrid.innerHTML = '';
        }

        // Load first page
        loadGalleries();
    });
</script>
