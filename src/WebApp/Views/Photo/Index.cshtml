@model List<BuildingBlock.DTOS.GalleryDTO>
@{
    ViewData["Title"] = "Photos";
    Layout = "~/Views/Shared/_Layout.cshtml";
    var apiUrl = ViewBag.ApiUrl;
    var cdnUrl = ViewBag.CdnUrl;
    var isLoggedIn = !string.IsNullOrEmpty(TempData["currentUser"]?.ToString());
}

<link rel="stylesheet" href="~/css/gallery-index.css" />

<!-- Hero Section -->
<div class="gallery-hero">
    <div class="hero-content">

        <!-- Search Bar -->
        <div class="search-container">
            <div class="search-box">
                <input type="text" id="searchInput" placeholder="Search photos..." class="search-input">
                <button id="clearSearchBtn" class="clear-search-btn" style="display: none;">‚úï</button>
                <button id="searchBtn" class="search-btn">üîç</button>
            </div>
        </div>

        @if (isLoggedIn)
        {
            <a href="/Photo/Manager/0" class="hero-btn">
                <span>+</span> CREATE NEW PHOTO
            </a>
        }
    </div>
</div>

<!-- Photo Grid -->
<div class="gallery-container">
    <div class="gallery-grid" id="galleryGrid">
        @if (Model != null && Model.Any())
        {
            @foreach (var gallery in Model)
            {
                <div class="gallery-item" data-gallery-id="@gallery.IdGallery">
                    <div class="gallery-banner">
                        @if (!string.IsNullOrEmpty(gallery.BannerImagePath))
                        {
                            <img src="@(cdnUrl)/assets/gallery/@gallery.IdGallery/@gallery.BannerImagePath" alt="@gallery.Title"
                                class="banner-img">
                        }
                        else
                        {
                            <div class="banner-placeholder"><span class="placeholder-icon">üì∏</span></div>
                        }

                        <div class="gallery-overlay">
                            <div class="gallery-info">
                                <h3 class="gallery-title">@gallery.Title.ToUpper()</h3>
                                <div class="gallery-meta">
                                    <span class="photo-count">üì∏ @gallery.GalleryItems.Count Photos</span>
                                    <span class="gallery-date">@gallery.CreatedDate.ToString("dd/MM/yyyy")</span>
                                </div>
                                <div class="gallery-actions">
                                    <a href="@(isLoggedIn ? $"/Photo/Manager/{gallery.IdGallery}" : $"/Photo/{gallery.Url?.Replace("/", "") ?? "Manager/" + gallery.IdGallery}")"
                                        class="action-btn">
                                        @(isLoggedIn ? "MANAGE" : "VIEW PHOTO")
                                    </a>
                                    @if (isLoggedIn)
                                    {
                                        <button class="delete-btn" onclick="deletePhoto(@gallery.IdGallery, '@gallery.Title')"
                                            title="X√≥a Photo">
                                            üóëÔ∏è
                                        </button>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>


                </div>
            }
        }
        else
        {
            <div class="empty-state">
                <div class="empty-content">
                    <div class="empty-icon">üì∏</div>
                    <h2 class="empty-title">No Photos Found</h2>
                    <p class="empty-subtitle">No photos available at the moment</p>
                </div>
            </div>
        }
    </div>
</div>

<!-- Load More Button -->
<div class="load-more-container">
    <button id="loadMoreBtn" class="load-more-btn" style="display: none;">
        <span class="btn-text">Load More Photos</span>
        <span class="btn-spinner" style="display: none;">‚è≥</span>
    </button>
</div>

<!-- End of Results -->
<div id="endOfResults" class="end-of-results" style="display: none;">
    <span>You've reached the end of the Photo collection</span>
</div>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script>
    // Load More Button and Search functionality
    let currentPage = 1;
    let isLoading = false;
    let hasMorePages = true;
    let currentSearch = '';
    const pageSize = 10;
    const apiUrl = '@apiUrl';
    const cdnUrl = '@cdnUrl';

    // DOM Elements
    const galleryGrid = document.querySelector('.gallery-grid');
    const searchInput = document.getElementById('searchInput');
    const searchBtn = document.getElementById('searchBtn');
    const clearSearchBtn = document.getElementById('clearSearchBtn');
    const loadMoreBtn = document.getElementById('loadMoreBtn');
    const btnText = loadMoreBtn ? loadMoreBtn.querySelector('.btn-text') : null;
    const btnSpinner = loadMoreBtn ? loadMoreBtn.querySelector('.btn-spinner') : null;
    const endOfResults = document.getElementById('endOfResults');

    // Search functionality
    function performSearch(searchTerm) {
        console.log('Performing search for:', searchTerm);

        // Trim and normalize search term
        currentSearch = searchTerm.trim();
        currentPage = 1;
        hasMorePages = true;

        // Clear existing galleries
        if (galleryGrid) {
            galleryGrid.innerHTML = '';
        }

        // Hide end of results
        if (endOfResults) {
            endOfResults.style.display = 'none';
        }

        // Update UI
        updateSearchUI();

        // Load first page with search
        loadGalleries(true);
    }

    // Clear search functionality
    function clearSearch() {
        console.log('Clearing search');

        // Clear search input
        if (searchInput) {
            searchInput.value = '';
        }

        // Reset search state
        currentSearch = '';
        currentPage = 1;
        hasMorePages = true;

        // Clear existing galleries
        if (galleryGrid) {
            galleryGrid.innerHTML = '';
        }

        // Hide end of results
        if (endOfResults) {
            endOfResults.style.display = 'none';
        }

        // Update UI
        updateSearchUI();

        // Load first page without search
        loadGalleries();
    }

    // Update search UI
    function updateSearchUI() {
        if (clearSearchBtn) {
            if (currentSearch) {
                clearSearchBtn.style.display = 'flex';
            } else {
                clearSearchBtn.style.display = 'none';
            }
        }
    }

    // Load galleries function
    function loadGalleries(isSearch = false) {
        if (isLoading || !hasMorePages) return;

        isLoading = true;

        // Show loading state on button
        if (loadMoreBtn) {
            loadMoreBtn.disabled = true;
            if (btnText) btnText.style.display = 'none';
            if (btnSpinner) btnSpinner.style.display = 'inline';
        }

        const searchParam = currentSearch ? `&search=${encodeURIComponent(currentSearch)}` : '';
        const url = `@Url.Action("LoadGalleries", "Photo")?page=${currentPage}&pageSize=${pageSize}${searchParam}`;

        console.log('Fetching URL:', url);

        $.ajax({
            url: url,
            type: 'GET',
            success: function (result) {
                console.log('API Response:', result);

                // API returns PagedResult directly, not wrapped in success field
                if (result && result.data) {
                    const galleries = result.data;

                    if (galleries.length === 0 && currentPage === 1) {
                        // No results found
                        showEmptyState();
                    } else if (galleries.length > 0) {
                        // Add galleries to grid
                        galleries.forEach(gallery => {
                            addPhotoToGrid(gallery);
                        });

                        // Check if there are more pages
                        hasMorePages = result.hasNextPage;
                        currentPage++;

                        // Show/hide load more button
                        updateLoadMoreButton();
                    }
                }
            },
            error: function (xhr, status, error) {
                console.error('Error loading galleries:', error);
            },
            complete: function () {
                isLoading = false;

                // Reset button state
                if (loadMoreBtn) {
                    loadMoreBtn.disabled = false;
                    if (btnText) btnText.style.display = 'inline';
                    if (btnSpinner) btnSpinner.style.display = 'none';
                }
            }
        });
    }

    // Add photo to grid
    function addPhotoToGrid(gallery) {
        if (!galleryGrid) return;

        const galleryItem = document.createElement('div');
        galleryItem.className = 'gallery-item';
        galleryItem.setAttribute('data-gallery-id', gallery.idGallery);

        const isLoggedIn = @isLoggedIn.ToString().ToLower();

        galleryItem.innerHTML = `
            <div class="gallery-banner">
                ${gallery.bannerImagePath ?
                `<img src="${cdnUrl}/assets/gallery/${gallery.idGallery}/${gallery.bannerImagePath}" alt="${gallery.title}" class="banner-img">` :
                `<div class="banner-placeholder"><span class="placeholder-icon">üì∏</span></div>`
            }
                
                <div class="gallery-overlay">
                    <div class="gallery-info">
                        <h3 class="gallery-title">${gallery.title.toUpperCase()}</h3>
                        <div class="gallery-meta">
                            <span class="photo-count">üì∏ ${gallery.galleryItems.length} Photos</span>
                            <span class="gallery-date">${new Date(gallery.createdDate).toLocaleDateString('vi-VN')}</span>
                        </div>
                        <div class="gallery-actions">
                            <a href="${isLoggedIn ? `/Photo/Manager/${gallery.idGallery}` : `/Photo/${gallery.url?.replace('/', '') || 'Manager/' + gallery.idGallery}`}" class="action-btn">
                                ${isLoggedIn ? 'MANAGE' : 'VIEW PHOTO'}
                            </a>
                            ${isLoggedIn ?
                `<button class="delete-btn" onclick="deletePhoto(${gallery.idGallery}, '${gallery.title}')" title="X√≥a Photo">
                                    üóëÔ∏è
                                </button>` : ''
            }
                        </div>
                    </div>
                </div>
            </div>
            
            
        `;

        galleryGrid.appendChild(galleryItem);
    }

    // Show empty state
    function showEmptyState() {
        if (galleryGrid) {
            galleryGrid.innerHTML = `
                <div class="empty-state">
                    <div class="empty-content">
                        <div class="empty-icon">üì∏</div>
                        <h2 class="empty-title">No Photos Found</h2>
                        <p class="empty-subtitle">Try adjusting your search terms</p>
                    </div>
                </div>
            `;
        }
    }

    // Update load more button visibility
    function updateLoadMoreButton() {
        if (loadMoreBtn) {
            // Check if we have exactly 10 galleries (full page) - might have more
            const currentGalleryCount = galleryGrid ? galleryGrid.querySelectorAll('.gallery-item').length : 0;

            if (hasMorePages && currentGalleryCount >= 10) {
                loadMoreBtn.style.display = 'block';
            } else {
                loadMoreBtn.style.display = 'none';
                if (!hasMorePages) {
                    showEndOfResults();
                }
            }
        }
    }

    // Show end of results
    function showEndOfResults() {
        if (endOfResults) {
            endOfResults.style.display = 'block';
        }
    }

    // Delete photo function
    function deletePhoto(galleryId, galleryTitle) {
        // Check if SweetAlert is loaded
        if (typeof Swal === 'undefined') {
            // Fallback to native confirm
            if (!confirm(`B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a photo "${galleryTitle}"?\n\nH√†nh ƒë·ªông n√†y s·∫Ω x√≥a:\n- T·∫•t c·∫£ ·∫£nh trong Photo\n- Banner image\n- To√†n b·ªô th∆∞ m·ª•c photo\n\nH√†nh ƒë·ªông n√†y KH√îNG TH·ªÇ HO√ÄN T√ÅC!`)) {
                return;
            }
        } else {
            // Show SweetAlert confirmation dialog
            Swal.fire({
                title: 'X√°c nh·∫≠n x√≥a Photo',
                html: `
                    <div style="text-align: left; margin: 20px 0;">
                        <p><strong>B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a photo "${galleryTitle}"?</strong></p>
                        <br>
                        <p>H√†nh ƒë·ªông n√†y s·∫Ω x√≥a:</p>
                        <ul style="margin-left: 20px;">
                            <li>T·∫•t c·∫£ ·∫£nh trong photo</li>
                            <li>Banner image</li>
                            <li>To√†n b·ªô th∆∞ m·ª•c photo</li>
                        </ul>
                        <br>
                        <p style="color: #dc3545; font-weight: bold;">‚ö†Ô∏è H√†nh ƒë·ªông n√†y KH√îNG TH·ªÇ HO√ÄN T√ÅC!</p>
                    </div>
                `,
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#dc3545',
                cancelButtonColor: '#6c757d',
                confirmButtonText: 'X√≥a Photo',
                cancelButtonText: 'H·ªßy',
                reverseButtons: true,
                focusCancel: true
            }).then((result) => {
                if (result.isConfirmed) {
                    performDelete(galleryId, galleryTitle);
                }
            });
            return;
        }

        // If using native confirm and confirmed
        performDelete(galleryId, galleryTitle);
    }

    function performDelete(galleryId, galleryTitle) {
        // Show loading
        if (typeof Swal !== 'undefined') {
            Swal.fire({
                title: 'ƒêang x√≥a...',
                text: 'Vui l√≤ng ch·ªù trong gi√¢y l√°t',
                allowOutsideClick: false,
                showConfirmButton: false,
                didOpen: () => {
                    Swal.showLoading();
                }
            });
        }

        $.ajax({
            url: '@Url.Action("DeleteGallery", "Photo")',
            type: 'POST',
            data: { id: galleryId },
            success: function (result) {
                if (result.success) {
                    // Remove gallery from UI
                    const galleryElement = document.querySelector(`[data-gallery-id="${galleryId}"]`);
                    if (galleryElement) {
                        galleryElement.remove();
                    }

                    // Show success message
                    if (typeof Swal !== 'undefined') {
                        Swal.fire({
                            title: 'Th√†nh c√¥ng!',
                            text: `Photo "${galleryTitle}" ƒë√£ ƒë∆∞·ª£c x√≥a th√†nh c√¥ng!`,
                            icon: 'success',
                            confirmButtonText: 'OK'
                        });
                    } else {
                        alert(`Photo "${galleryTitle}" ƒë√£ ƒë∆∞·ª£c x√≥a th√†nh c√¥ng!`);
                    }

                    // Update load more button visibility after deletion
                    updateLoadMoreButton();
                } else {
                    if (typeof Swal !== 'undefined') {
                        Swal.fire({
                            title: 'L·ªói!',
                            text: `L·ªói khi x√≥a photo: ${result.error || 'Unknown error'}`,
                            icon: 'error',
                            confirmButtonText: 'OK'
                        });
                    } else {
                        alert(`L·ªói khi x√≥a photo: ${result.error || 'Unknown error'}`);
                    }
                }
            },
            error: function (xhr, status, error) {
                console.error('Error deleting photo:', error);
                if (typeof Swal !== 'undefined') {
                    Swal.fire({
                        title: 'L·ªói!',
                        text: 'C√≥ l·ªói x·∫£y ra khi x√≥a photo. Vui l√≤ng th·ª≠ l·∫°i.',
                        icon: 'error',
                        confirmButtonText: 'OK'
                    });
                } else {
                    alert('C√≥ l·ªói x·∫£y ra khi x√≥a photo. Vui l√≤ng th·ª≠ l·∫°i.');
                }
            }
        });
    }

    // Event Listeners
    if (searchBtn) {
        searchBtn.addEventListener('click', () => {
            const searchTerm = searchInput ? searchInput.value.trim() : '';
            if (searchTerm) {
                performSearch(searchTerm);
            }
        });
    }

    if (clearSearchBtn) {
        clearSearchBtn.addEventListener('click', () => {
            clearSearch();
        });
    }

    if (searchInput) {
        searchInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                const searchTerm = searchInput.value.trim();
                if (searchTerm) {
                    performSearch(searchTerm);
                }
            }
        });

        // Show/hide clear button based on input
        searchInput.addEventListener('input', () => {
            updateSearchUI();
        });
    }

    // Load More Button Event Listener
    if (loadMoreBtn) {
        loadMoreBtn.addEventListener('click', () => {
            loadGalleries();
        });
    }

    // Initial setup
    document.addEventListener('DOMContentLoaded', () => {
        // Set initial state for load more functionality
        currentPage = 2; // Start from page 2 since page 1 is already loaded server-side
        hasMorePages = true;
        currentSearch = '';

        // Check if we need to show load more button
        // This will be determined by the server-side data
        updateLoadMoreButton();
    });
</script>
