@model List<BuildingBlock.DTOS.GalleryDTO>
@{
    ViewData["Title"] = "Photos";
    Layout = "~/Views/Shared/_Layout.cshtml";
    var apiUrl = ViewBag.ApiUrl;
    var cdnUrl = ViewBag.CdnUrl;
    var isLoggedIn = !string.IsNullOrEmpty(TempData["currentUser"]?.ToString());
}

<link rel="stylesheet" href="~/css/gallery-index.css" />

<!-- Hero Section -->
<div class="gallery-hero">
    <div class="hero-content">

        <!-- Search Bar -->
        <div class="search-container">
            <div class="search-box">
                <input type="text" id="searchInput" placeholder="Search photos..." class="search-input">
                <button id="clearSearchBtn" class="clear-search-btn" style="display: none;">‚úï</button>
                <button id="searchBtn" class="search-btn">üîç</button>
            </div>
        </div>

        @if (isLoggedIn)
        {
            <a href="/Photo/Manager/0" class="hero-btn">
                <span>+</span> CREATE NEW PHOTO
            </a>
        }
    </div>
</div>

<!-- Photo Grid -->
<div class="gallery-container">
    <div class="gallery-grid" id="galleryGrid">
        @if (Model != null && Model.Any())
        {
            @foreach (var gallery in Model)
            {
                <div class="gallery-item" data-gallery-id="@gallery.IdGallery" draggable="@(isLoggedIn ? "true" : "false")">
                    @if (isLoggedIn)
                    {
                        <button class="drag-handle" title="K√©o ƒë·ªÉ s·∫Øp x·∫øp l·∫°i">‚ãÆ‚ãÆ</button>
                    }
                    <div class="gallery-banner">
                        @if (!string.IsNullOrEmpty(gallery.BannerImagePath))
                        {
                            <img src="@(cdnUrl)/assets/gallery/@gallery.IdGallery/@gallery.BannerImagePath" alt="@gallery.Title"
                                class="banner-img">
                        }
                        else
                        {
                            <div class="banner-placeholder"><span class="placeholder-icon">üì∏</span></div>
                        }

                        <div class="gallery-overlay">
                            <div class="gallery-info">
                                <h3 class="gallery-title">@gallery.Title.ToUpper()</h3>
                                <div class="gallery-meta">
                                    <span class="photo-count">üì∏ @gallery.GalleryItems.Count Photos</span>
                                </div>
                                <div class="gallery-actions">
                                    <a href="@(isLoggedIn ? $"/Photo/Manager/{gallery.IdGallery}" : $"/Photo/{gallery.Url?.Replace("/", "") ?? "Manager/" + gallery.IdGallery}")"
                                        class="action-btn">
                                        @(isLoggedIn ? "MANAGE" : "VIEW PHOTO")
                                    </a>
                                    @if (isLoggedIn)
                                    {
                                        <button class="delete-btn" onclick="deletePhoto(@gallery.IdGallery, '@gallery.Title')"
                                            title="X√≥a Photo">
                                            üóëÔ∏è
                                        </button>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>


                </div>
            }
        }
        else
        {
            <div class="empty-state">
                <div class="empty-content">
                    <div class="empty-icon">üì∏</div>
                    <h2 class="empty-title">No Photos Found</h2>
                    <p class="empty-subtitle">No photos available at the moment</p>
                </div>
            </div>
        }
    </div>
</div>

<!-- Load More Button -->
<div class="load-more-container">
    <button id="loadMoreBtn" class="load-more-btn" style="display: none;">
        <span class="btn-text">Load More Photos</span>
        <span class="btn-spinner" style="display: none;">‚è≥</span>
    </button>
</div>

<!-- End of Results -->
<div id="endOfResults" class="end-of-results" style="display: none;">
    <span>You've reached the end of the Photo collection</span>
</div>

<!-- Mobile Reorder Controls - Only for small mobile screens -->
@if (isLoggedIn)
{
    <div id="mobileReorderControls" class="mobile-reorder-controls" style="display: none;">
        <button id="moveUpBtn" class="mobile-reorder-btn" title="Di chuy·ªÉn l√™n">‚Üë</button>
        <button id="moveDownBtn" class="mobile-reorder-btn" title="Di chuy·ªÉn xu·ªëng">‚Üì</button>
        <button id="cancelReorderBtn" class="mobile-reorder-btn" title="H·ªßy">‚úï</button>
    </div>
}
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script>
    // Load More Button and Search functionality
    let currentPage = 1;
    let isLoading = false;
    let hasMorePages = true;
    let currentSearch = '';
    const pageSize = 10;
    const apiUrl = '@apiUrl';
    const cdnUrl = '@cdnUrl';

    // DOM Elements
    const galleryGrid = document.querySelector('.gallery-grid');
    const searchInput = document.getElementById('searchInput');
    const searchBtn = document.getElementById('searchBtn');
    const clearSearchBtn = document.getElementById('clearSearchBtn');
    const loadMoreBtn = document.getElementById('loadMoreBtn');
    const btnText = loadMoreBtn ? loadMoreBtn.querySelector('.btn-text') : null;
    const btnSpinner = loadMoreBtn ? loadMoreBtn.querySelector('.btn-spinner') : null;
    const endOfResults = document.getElementById('endOfResults');

    // Search functionality
    function performSearch(searchTerm) {
        console.log('Performing search for:', searchTerm);

        // Trim and normalize search term
        currentSearch = searchTerm.trim();
        currentPage = 1;
        hasMorePages = true;

        // Clear existing galleries
        if (galleryGrid) {
            galleryGrid.innerHTML = '';
        }

        // Hide end of results
        if (endOfResults) {
            endOfResults.style.display = 'none';
        }

        // Hide mobile reorder controls
        hideMobileReorderControls();

        // Update UI
        updateSearchUI();

        // Load first page with search
        loadGalleries(true);
    }

    // Clear search functionality
    function clearSearch() {
        console.log('Clearing search');

        // Clear search input
        if (searchInput) {
            searchInput.value = '';
        }

        // Reset search state
        currentSearch = '';
        currentPage = 1;
        hasMorePages = true;

        // Clear existing galleries
        if (galleryGrid) {
            galleryGrid.innerHTML = '';
        }

        // Hide end of results
        if (endOfResults) {
            endOfResults.style.display = 'none';
        }

        // Hide mobile reorder controls
        hideMobileReorderControls();

        // Update UI
        updateSearchUI();

        // Load first page without search
        loadGalleries();
    }

    // Update search UI
    function updateSearchUI() {
        if (clearSearchBtn) {
            if (currentSearch) {
                clearSearchBtn.style.display = 'flex';
            } else {
                clearSearchBtn.style.display = 'none';
            }
        }
    }

    // Load galleries function
    function loadGalleries(isSearch = false) {
        if (isLoading || !hasMorePages) return;

        isLoading = true;

        // Show loading state on button
        if (loadMoreBtn) {
            loadMoreBtn.disabled = true;
            if (btnText) btnText.style.display = 'none';
            if (btnSpinner) btnSpinner.style.display = 'inline';
        }

        const searchParam = currentSearch ? `&search=${encodeURIComponent(currentSearch)}` : '';
        const url = `@Url.Action("LoadGalleries", "Photo")?page=${currentPage}&pageSize=${pageSize}${searchParam}`;

        console.log('Fetching URL:', url);

        $.ajax({
            url: url,
            type: 'GET',
            success: function (result) {
                console.log('API Response:', result);

                // API returns PagedResult directly, not wrapped in success field
                if (result && result.data) {
                    const galleries = result.data;

                    if (galleries.length === 0 && currentPage === 1) {
                        // No results found
                        showEmptyState();
                    } else if (galleries.length > 0) {
                        // Add galleries to grid
                        galleries.forEach(gallery => {
                            addPhotoToGrid(gallery);
                        });

                        // Check if there are more pages
                        hasMorePages = result.hasNextPage;
                        currentPage++;

                        // Show/hide load more button
                        updateLoadMoreButton();
                    }
                }
            },
            error: function (xhr, status, error) {
                console.error('Error loading galleries:', error);
            },
            complete: function () {
                isLoading = false;

                // Reset button state
                if (loadMoreBtn) {
                    loadMoreBtn.disabled = false;
                    if (btnText) btnText.style.display = 'inline';
                    if (btnSpinner) btnSpinner.style.display = 'none';
                }
            }
        });
    }

    // Add photo to grid
    function addPhotoToGrid(gallery) {
        if (!galleryGrid) return;

        const galleryItem = document.createElement('div');
        galleryItem.className = 'gallery-item';
        galleryItem.setAttribute('data-gallery-id', gallery.idGallery);
        galleryItem.setAttribute('draggable', isLoggedIn ? 'true' : 'false');

        const isLoggedIn = @isLoggedIn.ToString().ToLower();

        galleryItem.innerHTML = `
            ${isLoggedIn ? '<button class="drag-handle" title="K√©o ƒë·ªÉ s·∫Øp x·∫øp l·∫°i">‚ãÆ‚ãÆ</button>' : ''}
            <div class="gallery-banner">
                ${gallery.bannerImagePath ?
                `<img src="${cdnUrl}/assets/gallery/${gallery.idGallery}/${gallery.bannerImagePath}" alt="${gallery.title}" class="banner-img">` :
                `<div class="banner-placeholder"><span class="placeholder-icon">üì∏</span></div>`
            }
                
                <div class="gallery-overlay">
                    <div class="gallery-info">
                        <h3 class="gallery-title">${gallery.title.toUpperCase()}</h3>
                        <div class="gallery-meta">
                            <span class="photo-count">üì∏ ${gallery.galleryItems.length} Photos</span>
                        </div>
                        <div class="gallery-actions">
                            <a href="${isLoggedIn ? `/Photo/Manager/${gallery.idGallery}` : `/Photo/${gallery.url?.replace('/', '') || 'Manager/' + gallery.idGallery}`}" class="action-btn">
                                ${isLoggedIn ? 'MANAGE' : 'VIEW PHOTO'}
                            </a>
                            ${isLoggedIn ?
                `<button class="delete-btn" onclick="deletePhoto(${gallery.idGallery}, '${gallery.title}')" title="X√≥a Photo">
                                    üóëÔ∏è
                                </button>` : ''
            }
                        </div>
                    </div>
                </div>
            </div>
            
            
        `;

        galleryGrid.appendChild(galleryItem);

        // Initialize drag and drop for new item if logged in
        if (isLoggedIn) {
            initializeDragAndDropForItem(galleryItem);
        }
    }

    function initializeDragAndDropForItem(item) {
        if (!@isLoggedIn.ToString().ToLower()) return;

        if (isMobile && isSmallScreen) {
            // Mobile phone - use mobile controls only
            item.addEventListener('click', handleMobileClick);
        } else {
            // Desktop/Tablet - use drag & drop
            item.addEventListener('dragstart', handleDragStart);
            item.addEventListener('dragend', handleDragEnd);

            // Drop events
            item.addEventListener('dragover', handleDragOver);
            item.addEventListener('dragenter', handleDragEnter);
            item.addEventListener('dragleave', handleDragLeave);
            item.addEventListener('drop', handleDrop);

            // Also add touch events for tablets
            if (isTablet || window.innerWidth > 768) {
                item.addEventListener('touchstart', handleTouchStart, { passive: false });
                item.addEventListener('touchmove', handleTouchMove, { passive: false });
                item.addEventListener('touchend', handleTouchEnd, { passive: false });
            }
        }
    }

    // Mobile touch event handlers
    function handleTouchStart(e) {
        const touch = e.touches[0];
        touchStartY = touch.clientY;
        touchStartX = touch.clientX;

        const item = e.target.closest('.gallery-item');
        if (item) {
            selectedElement = item;
        }
    }

    function handleTouchMove(e) {
        if (!selectedElement) return;

        const touch = e.touches[0];
        const deltaY = Math.abs(touch.clientY - touchStartY);
        const deltaX = Math.abs(touch.clientX - touchStartX);

        // If vertical movement is significant, prevent default scrolling
        if (deltaY > 10 && deltaY > deltaX) {
            e.preventDefault();
            selectedElement.classList.add('touch-dragging');
        }
    }

    function handleTouchEnd(e) {
        if (selectedElement) {
            selectedElement.classList.remove('touch-dragging');
            selectedElement = null;
        }
    }

    function handleMobileClick(e) {
        console.log('Mobile click detected', e.target);

        // Prevent click if it was part of a drag gesture
        if (selectedElement) {
            e.preventDefault();
            return;
        }

        const item = e.target.closest('.gallery-item');
        const dragHandle = e.target.closest('.drag-handle');

        console.log('Item:', item, 'DragHandle:', dragHandle);

        if (item && dragHandle) {
            e.preventDefault();
            e.stopPropagation();
            console.log('Showing mobile reorder controls');
            // Show mobile reorder controls
            showMobileReorderControls(item);
        } else if (item && !dragHandle) {
            // If clicking on gallery item but not on drag handle, hide controls
            console.log('Hiding mobile reorder controls');
            hideMobileReorderControls();
        }
    }

    function showMobileReorderControls(item) {
        console.log('showMobileReorderControls called', item);
        selectedElement = item;
        const controls = document.getElementById('mobileReorderControls');
        console.log('Controls element:', controls);

        if (controls) {
            controls.classList.add('show');
            controls.style.display = 'flex';
            console.log('Controls should be visible now');

            // Update button states
            const moveUpBtn = document.getElementById('moveUpBtn');
            const moveDownBtn = document.getElementById('moveDownBtn');

            const currentIndex = Array.from(galleryGrid.children).indexOf(item);
            if (moveUpBtn) moveUpBtn.disabled = currentIndex === 0;
            if (moveDownBtn) moveDownBtn.disabled = currentIndex === galleryGrid.children.length - 1;

            // Highlight selected item
            item.style.border = '2px solid #bbd2c5';
            item.style.transform = 'scale(1.02)';
        } else {
            console.error('Mobile reorder controls not found!');
        }
    }

    function hideMobileReorderControls() {
        const controls = document.getElementById('mobileReorderControls');
        if (controls) {
            controls.classList.remove('show');
        }

        if (selectedElement) {
            selectedElement.style.border = '';
            selectedElement.style.transform = '';
            selectedElement = null;
        }
    }

    // Mobile reorder button handlers
    function setupMobileReorderButtons() {
        const moveUpBtn = document.getElementById('moveUpBtn');
        const moveDownBtn = document.getElementById('moveDownBtn');
        const cancelBtn = document.getElementById('cancelReorderBtn');

        if (moveUpBtn) {
            moveUpBtn.addEventListener('click', () => {
                if (selectedElement) {
                    moveItemUp(selectedElement);
                }
            });
        }

        if (moveDownBtn) {
            moveDownBtn.addEventListener('click', () => {
                if (selectedElement) {
                    moveItemDown(selectedElement);
                }
            });
        }

        if (cancelBtn) {
            cancelBtn.addEventListener('click', hideMobileReorderControls);
        }
    }

    function moveItemUp(item) {
        const currentIndex = Array.from(galleryGrid.children).indexOf(item);
        if (currentIndex > 0) {
            const prevItem = galleryGrid.children[currentIndex - 1];
            galleryGrid.insertBefore(item, prevItem);
            updateGalleryOrder();

            // Update button states
            const moveUpBtn = document.getElementById('moveUpBtn');
            const moveDownBtn = document.getElementById('moveDownBtn');
            moveUpBtn.disabled = currentIndex - 1 === 0;
            moveDownBtn.disabled = false;
        }
    }

    function moveItemDown(item) {
        const currentIndex = Array.from(galleryGrid.children).indexOf(item);
        if (currentIndex < galleryGrid.children.length - 1) {
            const nextItem = galleryGrid.children[currentIndex + 1];
            galleryGrid.insertBefore(item, nextItem.nextSibling);
            updateGalleryOrder();

            // Update button states
            const moveUpBtn = document.getElementById('moveUpBtn');
            const moveDownBtn = document.getElementById('moveDownBtn');
            moveUpBtn.disabled = false;
            moveDownBtn.disabled = currentIndex + 1 === galleryGrid.children.length - 1;
        }
    }

    // Show empty state
    function showEmptyState() {
        if (galleryGrid) {
            galleryGrid.innerHTML = `
                <div class="empty-state">
                    <div class="empty-content">
                        <div class="empty-icon">üì∏</div>
                        <h2 class="empty-title">No Photos Found</h2>
                        <p class="empty-subtitle">Try adjusting your search terms</p>
                    </div>
                </div>
            `;
        }
    }

    // Update load more button visibility
    function updateLoadMoreButton() {
        if (loadMoreBtn) {
            // Check if we have exactly 10 galleries (full page) - might have more
            const currentGalleryCount = galleryGrid ? galleryGrid.querySelectorAll('.gallery-item').length : 0;

            if (hasMorePages && currentGalleryCount >= 10) {
                loadMoreBtn.style.display = 'block';
            } else {
                loadMoreBtn.style.display = 'none';
                if (!hasMorePages) {
                    showEndOfResults();
                }
            }
        }
    }

    // Show end of results
    function showEndOfResults() {
        if (endOfResults) {
            endOfResults.style.display = 'block';
        }
    }

    // Delete photo function
    function deletePhoto(galleryId, galleryTitle) {
        // Check if SweetAlert is loaded
        if (typeof Swal === 'undefined') {
            // Fallback to native confirm
            if (!confirm(`B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a photo "${galleryTitle}"?\n\nH√†nh ƒë·ªông n√†y s·∫Ω x√≥a:\n- T·∫•t c·∫£ ·∫£nh trong Photo\n- Banner image\n- To√†n b·ªô th∆∞ m·ª•c photo\n\nH√†nh ƒë·ªông n√†y KH√îNG TH·ªÇ HO√ÄN T√ÅC!`)) {
                return;
            }
        } else {
            // Show SweetAlert confirmation dialog
            Swal.fire({
                title: 'X√°c nh·∫≠n x√≥a Photo',
                html: `
                    <div style="text-align: left; margin: 20px 0;">
                        <p><strong>B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a photo "${galleryTitle}"?</strong></p>
                        <br>
                        <p>H√†nh ƒë·ªông n√†y s·∫Ω x√≥a:</p>
                        <ul style="margin-left: 20px;">
                            <li>T·∫•t c·∫£ ·∫£nh trong photo</li>
                            <li>Banner image</li>
                            <li>To√†n b·ªô th∆∞ m·ª•c photo</li>
                        </ul>
                        <br>
                        <p style="color: #dc3545; font-weight: bold;">‚ö†Ô∏è H√†nh ƒë·ªông n√†y KH√îNG TH·ªÇ HO√ÄN T√ÅC!</p>
                    </div>
                `,
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#dc3545',
                cancelButtonColor: '#6c757d',
                confirmButtonText: 'X√≥a Photo',
                cancelButtonText: 'H·ªßy',
                reverseButtons: true,
                focusCancel: true
            }).then((result) => {
                if (result.isConfirmed) {
                    performDelete(galleryId, galleryTitle);
                }
            });
            return;
        }

        // If using native confirm and confirmed
        performDelete(galleryId, galleryTitle);
    }

    function performDelete(galleryId, galleryTitle) {
        // Show loading
        if (typeof Swal !== 'undefined') {
            Swal.fire({
                title: 'ƒêang x√≥a...',
                text: 'Vui l√≤ng ch·ªù trong gi√¢y l√°t',
                allowOutsideClick: false,
                showConfirmButton: false,
                didOpen: () => {
                    Swal.showLoading();
                }
            });
        }

        $.ajax({
            url: '@Url.Action("DeleteGallery", "Photo")',
            type: 'POST',
            data: { id: galleryId },
            success: function (result) {
                if (result.success) {
                    // Remove gallery from UI
                    const galleryElement = document.querySelector(`[data-gallery-id="${galleryId}"]`);
                    if (galleryElement) {
                        galleryElement.remove();
                    }

                    // Show success message
                    if (typeof Swal !== 'undefined') {
                        Swal.fire({
                            title: 'Th√†nh c√¥ng!',
                            text: `Photo "${galleryTitle}" ƒë√£ ƒë∆∞·ª£c x√≥a th√†nh c√¥ng!`,
                            icon: 'success',
                            confirmButtonText: 'OK'
                        });
                    } else {
                        alert(`Photo "${galleryTitle}" ƒë√£ ƒë∆∞·ª£c x√≥a th√†nh c√¥ng!`);
                    }

                    // Update load more button visibility after deletion
                    updateLoadMoreButton();
                } else {
                    if (typeof Swal !== 'undefined') {
                        Swal.fire({
                            title: 'L·ªói!',
                            text: `L·ªói khi x√≥a photo: ${result.error || 'Unknown error'}`,
                            icon: 'error',
                            confirmButtonText: 'OK'
                        });
                    } else {
                        alert(`L·ªói khi x√≥a photo: ${result.error || 'Unknown error'}`);
                    }
                }
            },
            error: function (xhr, status, error) {
                console.error('Error deleting photo:', error);
                if (typeof Swal !== 'undefined') {
                    Swal.fire({
                        title: 'L·ªói!',
                        text: 'C√≥ l·ªói x·∫£y ra khi x√≥a photo. Vui l√≤ng th·ª≠ l·∫°i.',
                        icon: 'error',
                        confirmButtonText: 'OK'
                    });
                } else {
                    alert('C√≥ l·ªói x·∫£y ra khi x√≥a photo. Vui l√≤ng th·ª≠ l·∫°i.');
                }
            }
        });
    }

    // Event Listeners
    if (searchBtn) {
        searchBtn.addEventListener('click', () => {
            const searchTerm = searchInput ? searchInput.value.trim() : '';
            if (searchTerm) {
                performSearch(searchTerm);
            }
        });
    }

    if (clearSearchBtn) {
        clearSearchBtn.addEventListener('click', () => {
            clearSearch();
        });
    }

    if (searchInput) {
        searchInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                const searchTerm = searchInput.value.trim();
                if (searchTerm) {
                    performSearch(searchTerm);
                }
            }
        });

        // Show/hide clear button based on input
        searchInput.addEventListener('input', () => {
            updateSearchUI();
        });
    }

    // Load More Button Event Listener
    if (loadMoreBtn) {
        loadMoreBtn.addEventListener('click', () => {
            loadGalleries();
        });
    }

    // Drag & Drop functionality
    let draggedElement = null;
    let draggedIndex = -1;
    let selectedElement = null;
    let isMobile = /Android|webOS|iPhone|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
    let isTablet = /iPad/i.test(navigator.userAgent);
    let isSmallScreen = window.innerWidth <= 768;
    let touchStartY = 0;
    let touchStartX = 0;

    function initializeDragAndDrop() {
        if (!@isLoggedIn.ToString().ToLower()) return;

        const galleryItems = document.querySelectorAll('.gallery-item[draggable="true"]');

        galleryItems.forEach((item, index) => {
            if (isMobile && isSmallScreen) {
                // Mobile phone - use mobile controls only
                item.addEventListener('click', handleMobileClick);
            } else {
                // Desktop/Tablet - use drag & drop
                item.addEventListener('dragstart', handleDragStart);
                item.addEventListener('dragend', handleDragEnd);

                // Drop events
                item.addEventListener('dragover', handleDragOver);
                item.addEventListener('dragenter', handleDragEnter);
                item.addEventListener('dragleave', handleDragLeave);
                item.addEventListener('drop', handleDrop);

                // Also add touch events for tablets
                if (isTablet || window.innerWidth > 768) {
                    item.addEventListener('touchstart', handleTouchStart, { passive: false });
                    item.addEventListener('touchmove', handleTouchMove, { passive: false });
                    item.addEventListener('touchend', handleTouchEnd, { passive: false });
                }
            }
        });
    }

    function handleDragStart(e) {
        draggedElement = e.target;
        draggedIndex = Array.from(galleryGrid.children).indexOf(draggedElement);
        draggedElement.classList.add('dragging');

        // Set drag data
        e.dataTransfer.effectAllowed = 'move';
        e.dataTransfer.setData('text/html', draggedElement.outerHTML);
    }

    function handleDragEnd(e) {
        draggedElement.classList.remove('dragging');

        // Remove drag-over classes from all items
        document.querySelectorAll('.gallery-item').forEach(item => {
            item.classList.remove('drag-over', 'drag-placeholder');
        });

        draggedElement = null;
        draggedIndex = -1;
    }

    function handleDragOver(e) {
        e.preventDefault();
        e.dataTransfer.dropEffect = 'move';
    }

    function handleDragEnter(e) {
        e.preventDefault();
        if (e.target.classList.contains('gallery-item') && e.target !== draggedElement) {
            e.target.classList.add('drag-over');
        }
    }

    function handleDragLeave(e) {
        if (e.target.classList.contains('gallery-item')) {
            e.target.classList.remove('drag-over');
        }
    }

    function handleDrop(e) {
        e.preventDefault();

        const dropTarget = e.target.closest('.gallery-item');
        if (!dropTarget || dropTarget === draggedElement) return;

        const dropIndex = Array.from(galleryGrid.children).indexOf(dropTarget);

        // Remove drag classes
        dropTarget.classList.remove('drag-over');
        draggedElement.classList.remove('dragging');

        // Reorder elements
        if (draggedIndex < dropIndex) {
            galleryGrid.insertBefore(draggedElement, dropTarget.nextSibling);
        } else {
            galleryGrid.insertBefore(draggedElement, dropTarget);
        }

        // Update positions on server
        updateGalleryOrder();
    }

    function updateGalleryOrder() {
        const galleryItems = Array.from(galleryGrid.querySelectorAll('.gallery-item'));
        const galleryIds = galleryItems.map(item => parseInt(item.getAttribute('data-gallery-id')));

        console.log('Updating gallery order:', galleryIds);

        // Show loading state
        if (typeof Swal !== 'undefined') {
            Swal.fire({
                title: 'ƒêang c·∫≠p nh·∫≠t...',
                text: 'Vui l√≤ng ch·ªù trong gi√¢y l√°t',
                allowOutsideClick: false,
                showConfirmButton: false,
                didOpen: () => {
                    Swal.showLoading();
                }
            });
        }

        $.ajax({
            url: '@Url.Action("ReorderGalleries", "Photo")',
            type: 'POST',
            contentType: 'application/json',
            data: JSON.stringify(galleryIds),
            success: function (result) {
                console.log('Gallery order updated successfully');

                if (typeof Swal !== 'undefined') {
                    Swal.fire({
                        title: 'Th√†nh c√¥ng!',
                        text: 'Th·ª© t·ª± photo ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t!',
                        icon: 'success',
                        timer: 2000,
                        showConfirmButton: false
                    });
                }
            },
            error: function (xhr, status, error) {
                console.error('Error updating gallery order:', error);

                if (typeof Swal !== 'undefined') {
                    Swal.fire({
                        title: 'L·ªói!',
                        text: 'C√≥ l·ªói x·∫£y ra khi c·∫≠p nh·∫≠t th·ª© t·ª±. Vui l√≤ng th·ª≠ l·∫°i.',
                        icon: 'error',
                        confirmButtonText: 'OK'
                    });
                }

                // Reload page to restore original order
                setTimeout(() => {
                    window.location.reload();
                }, 2000);
            }
        });
    }

    // Initial setup
    document.addEventListener('DOMContentLoaded', () => {
        console.log('Device detection:', {
            isMobile: isMobile,
            isTablet: isTablet,
            isSmallScreen: isSmallScreen,
            windowWidth: window.innerWidth,
            userAgent: navigator.userAgent
        });

        // Set initial state for load more functionality
        currentPage = 2; // Start from page 2 since page 1 is already loaded server-side
        hasMorePages = true;
        currentSearch = '';

        // Check if we need to show load more button
        // This will be determined by the server-side data
        updateLoadMoreButton();

        // Initialize drag and drop
        initializeDragAndDrop();

        // Setup mobile reorder buttons only on mobile
        if (@isLoggedIn.ToString().ToLower() && isMobile && isSmallScreen) {
            console.log('Setting up mobile reorder buttons');
            setupMobileReorderButtons();

            // Hide mobile controls when clicking outside
            document.addEventListener('click', (e) => {
                const controls = document.getElementById('mobileReorderControls');
                const isClickOnControls = controls && controls.contains(e.target);
                const isClickOnDragHandle = e.target.closest('.drag-handle');

                if (!isClickOnControls && !isClickOnDragHandle) {
                    hideMobileReorderControls();
                }
            });
        } else {
            console.log('Not setting up mobile reorder buttons');
        }
    });
</script>
